#!/usr/bin/python
# coding=UTF8

debug = 1

# from=55.753174,37.406403&to=55.749020,37.446831

#import cgitb; cgitb.enable()
import sys
import cgi
import httplib
import urllib
import base64
import string

if not debug:
    from google.appengine.api import memcache

# Convert array of point's attributes to string description
def description (s):
    res = ""
    if s[5] != 0:
        res += ['Прямо', 'Правее', 'Направо', 'Направо', 'Разворот', 'Налево', 'Налево', 'Левее'][s[5]] + ", "
    if s[4] != 0:
        if res == "":
            res += "Съезд, "
        else:
            res += "съезд, "
    res += s[3] + ", расстояние %(len).2f км." % {"len": s[2]/1000}
    return res

def emptyGPX ():
    result = '<?xml version="1.0" encoding="UTF-8"?>'+"\n"
    result += '<gpx version="1.0" creator="http://mm-proxy.appspot.com/yaroute" xmlns="http://www.topografix.com/GPX/1/0">'+"\n"
    result += '  <trk/>'+"\n"
    result += '</gpx>'+"\n"
    print result

print "Content-Type: text/xml"
print

if debug == 0:
    args = cgi.FieldStorage ()
    if not "from" in args or not "to" in args:
        emptyGPX ()
        exit ()
    f = args["from"].value
    t = args["to"].value
    traffic = True
    if "traffic" in args:
        traffic = int(args["traffic"].value) > 0
else:
#    f = "Самокатная, 1"
#    t = "Зеленый проспект, 65"
#    f = "55.753317,37.808087"
#    t = "55.730810,37.736687"
#    f = "55.753352,37.808067"
#    t = "55.687334,37.555967"
#    f = "55.753352,37.808067"
#    t = "55.687747,37.556353"
    f = "55.753174,37.406403"
    t = "55.749020,37.446831"
    traffic = False

def handleLatLon (s):
    if len (s.translate (string.maketrans ("", ""), ' 0123456789.,')) == 0:
        v = s.split (",")
        if len (v) == 2:
            s = v[1] + "," + v[0]
        else:
            return s
    else:
        return s
    return s

f = urllib.unquote(f)
t = urllib.unquote(t)
f = handleLatLon (f)
t = handleLatLon (t)

if f == "" or t == "":
    emptyGPX ()
    exit ()

if debug != 0:
    print f + " -> " + t

# obtain route directives
req = urllib.quote (f)+"~"+urllib.quote (t)
srv = "maps.yandex.ru"
url = "/?rt=" + req + "&output=js"

if traffic:
    url += "&l=trf"

if not debug:
    # check in memcache
    val = memcache.get (url);
    if val != None:
        print val
        exit ()

if debug != 0:
    print "http://"+srv+"/"+url
    print urllib.unquote(url)

conn = httplib.HTTPConnection (srv);
conn.request ("GET", url);
r = conn.getresponse ();
data = r.read ().replace ("\\", "")
conn.close ();

if debug != 0:
    print data;

# parse data
# segments
s_ind = data.find ("\"segments\"")

if s_ind == -1:
    emptyGPX ()
    exit ()

s_ind = data.find ("[{", s_ind)+1;
e_ind = data.find ("}]", s_ind);

print data[s_ind+1:e_ind]

segs = data[s_ind+1:e_ind].split ("},{")

# parse segments
segments = {}
for seg in segs:
    attrs = seg.split (",")
    lon = float (attrs[0].split ("[")[1])
    lat = float (attrs[1].split ("]")[0])
    length = float (attrs[2].split (":")[1])
    street = attrs[3].split (":")[1]
    exit = int (attrs[4].split (":")[1])
    dir  = int (attrs[5].split (":")[1])

    key = "%(lon)0.6f,%(lat)0.6f" % { "lon": lon, "lat": lat }
    key = key.replace (".", "")
    segments[key] = [lon, lat, length, street.replace ('"', ''), exit, dir]

# encoded points
s_ind = data.find ('"encodedPoints"')

if s_ind == -1:
    exit ()

s_ind = data.find (":", s_ind)+2
e_ind = data.find ('"levels"', s_ind)-2

enc_pts = data[s_ind:e_ind]

pts = base64.b64decode (enc_pts, "-_");

# GPX header
result = ""
result += '<?xml version="1.0" encoding="UTF-8"?>'+"\n"
result += '<gpx version="1.0" creator="http://mm-proxy.appspot.com/yaroute" xmlns="http://www.topografix.com/GPX/1/0">'+"\n"
result += '  <trk>'+"\n"
result += '    <trkseg>'+"\n"

def decode_val (a, b, c, d):
    v = ord (a)*16777216 + ord (b)*65536 + ord (c)*256 + ord (d);
    if v > 2147483648:
        v -= 4294967296
    return v

# process encoded points
lat = lon = i = 0
prev_key = ""
while i < len(pts):
    lon += decode_val (pts[i+3], pts[i+2], pts[i+1], pts[i])
    lat += decode_val (pts[i+7], pts[i+6], pts[i+5], pts[i+4])

    key = "%(lon)d,%(lat)d" % { "lon": lon, "lat": lat };
    if key != prev_key:
        result += ' '*6 + ('<trkpt lat="%(lat1)d.%(lat2)06d" lon="%(lon1)d.%(lon2)06d"' % { "lat1": lat // 1000000, "lat2": lat % 1000000,
                                                                                            "lon1": lon // 1000000, "lon2": lon % 1000000 })
        if key in segments:
            result += '>'+"\n"
            result += ' '*8 + "<desc>" + description (segments[key]) + "</desc>"+"\n"
            result += ' '*6 + "</trkpt>"+"\n"
        else:
            result += '/>'+"\n"
    i += 8
    prev_key = key;

result += '    </trkseg>'+"\n"
result += '  </trk>'+"\n"
result += '</gpx>'

if not debug:
    # save in memcache
    memcache.set (url, result)
print result
