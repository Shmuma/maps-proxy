#!/usr/bin/python

import sys
import cgi
import httplib
import time
import os

from google.appengine.api import memcache
from google.appengine.ext.webapp import template


def get_timestamp ():
    conn = httplib.HTTPConnection ("jgo.maps.yandex.net")
    conn.request ("GET", "/trf/stat.xml")
    r = conn.getresponse ()

    for l in r.read ().split ("\n"):
        if l.find ("jams_stat timestamp") >= 0:
            ts = int (l.split ("\"")[1])

    conn.close ()
    return ts


def get_timestamp_indir ():
    conn = httplib.HTTPConnection ("maemo.shmuma.ru")
    conn.request ("GET", "/proxy/timestamp")
    r = conn.getresponse ()

    ts = int (r.read ())
    conn.close ()
    return ts  


def show_help_page ():
    path = os.path.join (os.path.dirname (__file__), "trf_index.html")
    print (template.render (path, {}))



# http://maemo.shmuma.ru/proxy/traffic.yandex?x=4955&y=2567&z=13
# http://jgo.maps.yandex.net/tiles?l=trf&x=620&y=319&z=10&tm=1241976241
# http://jgo.maps.yandex.net/trf/stat.xml
debug = 0

if debug != 0:
    [x,y,z] = map (int, sys.argv[1:])
else:
    args = cgi.FieldStorage ()

    try:
        x = int (args["x"].value)
        y = int (args["y"].value)
        z = int (args["z"].value)
    except:
        show_help_page ()
        exit ()

# obtain timestamp of last update
ts_key = "timestamp"
ts_new = 0
ts = memcache.get (ts_key)
if ts == None or ts < time.time () - 60*5:
    ts = get_timestamp ()
    memcache.set (ts_key, ts, 60*5)
    ts_new = 1

# get tile data
srv = "jgo.maps.yandex.net"
req = "/tiles?l=trf&x=%(x)d&y=%(y)d&z=%(z)d&tm=%(tm)d" % { "x" : x, "y" : y, "z" : z, "tm" : ts}

if debug > 0:
    print "http://%(srv)s%(req)s" % {"srv" : srv, "req" : req}
else:
    key = "%(x)d-%(y)d-%(z)d" % { "x" : x, "y" : y, "z" : z}
    result = memcache.get (key)
    if result == None or ts_new == 1:
        try:
            conn = httplib.HTTPConnection (srv)
            conn.request ("GET", req)
            r = conn.getresponse ()
            result = ""
            result += "Status: %(stat)d %(reason)s\n" % { "stat" : r.status, "reason" :r.reason }
            result += "Content-Type: %(type)s\n" % {"type" : r.getheader ("Content-Type")}
            result += "\n"
            result += r.read ()
            conn.close ()
            memcache.set (key, result, 60*10)
            print result
        except:
            result = "Status: 404\n\n"
            memcache.set (key, result, 60*10)
            print result
    else:
        print result
